@{
    ViewData["Title"] = "Игра";
}

<h2>Ласточка</h2>
<canvas id="gameCanvas" width="600" height="600"></canvas>
<button id="startButton" class="btn btn-success rounded-pill px-3" type="button">Начать заново</button>
<h3 id="score">Счет: 0</h3>

<style>
    body {
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: white; /* Белый фон */
    }

    canvas {
        border: 1px solid black;
        background-color: white;
    }
</style>
<body>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const box = 20;
        let train = [{ x: box * 5, y: box * 5 }];
        let direction = { x: box, y: 0 };
        let food = {
            x: Math.floor(Math.random() * (canvas.width / box)) * box, y: Math.floor(Math.random() * (canvas.height / box)) * box
        };
        let score = 0;

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Очищаем холст

            // Рисуем голову поезда
            const TrainHeadImage = new Image(); // Цвет головы
            TrainHeadImage.src = '/img/lastochkaHead.jpg';

            const headRotation = Math.atan2(direction.y, direction.x) + Math.PI / 2; // Определяем угол поворота
            ctx.save();
            ctx.translate(train[0].x + box / 2, train[0].y + box / 2); // Переход к центру головы
            ctx.rotate(headRotation); // Поворот головы
            ctx.drawImage(TrainHeadImage, -box / 2, -box / 2, box, box);
            ctx.restore();

            // Рисуем тело поезда
            const TrainImage = new Image(); // Цвет тела
            TrainImage.src = '/img/TiltLastochka.png';

            for (let i = 1; i < train.length; i++) {
                ctx.drawImage(TrainImage, train[i].x, train[i].y, box, box);
            }

            // Рисуем еду (молнию)
            const lightningImage = new Image();
            lightningImage.src = '/img/lightning.jpg';
            ctx.drawImage(lightningImage, food.x, food.y, box, box);

            // Перемещение поезда
            const newHead = { x: train[0].x + direction.x, y: train[0].y + direction.y };
            train.unshift(newHead);

            if (newHead.x === food.x && newHead.y === food.y) {
                score++;
                document.getElementById("score").innerText = "Счет: " + score;
                food = { x: Math.floor(Math.random() * (canvas.width / box)) * box, y: Math.floor(Math.random() * (canvas.height / box)) * box };
            } else {
                train.pop();
            }

            if (newHead.x < 0 || newHead.x >= canvas.width || newHead.y < 0 || newHead.y >= canvas.height || collision(newHead)) {
                alert('Игра окончена! Ваш счет: ' + score);
                resetGame();
            }
        }

        function collision(head) {
            for (let i = 1; i < train.length; i++) {
                if (train[i].x === head.x && train[i].y === head.y) {
                    return true;
                }
            }
            return false;
        }

        document.addEventListener('keydown', event => {
            if (event.key === 'ArrowUp' && direction.y === 0) direction = { x: 0, y: -box };
            else if (event.key === 'ArrowDown' && direction.y === 0) direction = { x: 0, y: box };
            else if (event.key === 'ArrowLeft' && direction.x === 0) direction = { x: -box, y: 0 };
            else if (event.key === 'ArrowRight' && direction.x === 0) direction = { x: box, y: 0 };
        });

        function resetGame() {
            train = [{ x: box * 5, y: box * 5 }];
            direction = {
                x: box, y: 0
            };
            score = 0;
            document.getElementById("score").innerText = "Счет: " + score;
            food = { x: Math.floor(Math.random() * (canvas.width / box)) * box, y: Math.floor(Math.random() * (canvas.height / box)) * box };
        }

        setInterval(draw, 200);

        document.getElementById('startButton').addEventListener('click', () => {
            resetGame();
        });
    </script>
</body>